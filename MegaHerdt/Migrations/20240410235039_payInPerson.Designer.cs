// <auto-generated />
using System;
using MegaHerdt.DbConfiguration.DbConfiguration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MegaHerdt.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240410235039_payInPerson")]
    partial class payInPerson
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MegaHerdt.Models.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<float>("UnitValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArticlesBrands");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArticlesCategories");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticlesOffers");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("DiscountReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProvisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Voucher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ArticlesProviders");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleProviderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProvisionId")
                        .HasColumnType("int");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ProvisionId");

                    b.ToTable("ArticleProviderItems");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleProviderSerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleProviderItemId")
                        .HasColumnType("int");

                    b.Property<bool>("EnStock")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleProviderItemId");

                    b.ToTable("ArticlesProviderSerialNumbers");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ReparationId")
                        .HasColumnType("int");

                    b.Property<string>("SaleNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId")
                        .IsUnique()
                        .HasFilter("[PurchaseId] IS NOT NULL");

                    b.HasIndex("ReparationId")
                        .IsUnique()
                        .HasFilter("[ReparationId] IS NOT NULL");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dni")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Dni")
                        .IsUnique()
                        .HasFilter("[Dni] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7c2e2a04-d48c-4dd7-a3b9-4474c400dcbe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aab76f62-fb35-42c8-8298-bc5a6c0669b8",
                            CreatedDate = new DateTime(2024, 4, 10, 23, 50, 38, 917, DateTimeKind.Utc).AddTicks(6799),
                            Dni = "42464099",
                            Email = "megaherdt.electronica@hotmail.com",
                            EmailConfirmed = false,
                            Enabled = true,
                            IsActive = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = true,
                            Name = "Admin",
                            NormalizedEmail = "MEGAHERDT.ELECTRONICA@HOTMAIL.COM",
                            NormalizedUserName = "MEGAHERDT.ELECTRONICA@HOTMAIL.COM",
                            Password = "HbUx5+Ac8aaOfKLSxrpaTQ8uMV9Iz/ty5pBaJINg5Fc=",
                            PasswordHash = "AQAAAAEAACcQAAAAEMfyNTA180vxZ2Log08brPlw6oav6rL7mDtMn2Dv22mlg+eRjRRRtNMSCA4aoAvyNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccfbfa6e-247d-47f6-b07b-ddbce67d8266",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "megaherdt.electronica@hotmail.com"
                        },
                        new
                        {
                            Id = "7c2e2a04-d48d-4dd7-a3b9-4474c400dcbe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01d96b8c-590e-4527-a09f-dc55b1715c94",
                            CreatedDate = new DateTime(2024, 4, 10, 23, 50, 38, 917, DateTimeKind.Utc).AddTicks(6809),
                            Dni = "45698746",
                            Email = "conefecto77@gmail.com",
                            EmailConfirmed = false,
                            Enabled = true,
                            IsActive = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = true,
                            Name = "Tomi",
                            NormalizedEmail = "CONEFECTO77@GMAIL.COM",
                            NormalizedUserName = "CONEFECTO77@GMAIL.COM",
                            Password = "HbUx5+Ac8aaOfKLSxrpaTQ8uMV9Iz/ty5pBaJINg5Fc=",
                            PasswordHash = "AQAAAAEAACcQAAAAEMfyNTA180vxZ2Log08brPlw6oav6rL7mDtMn2Dv22mlg+eRjRRRtNMSCA4aoAvyNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f9afb3c-a910-4962-8a0e-07a5903643a4",
                            Surname = "Zappa",
                            TwoFactorEnabled = false,
                            UserName = "conefecto77@gmail.com"
                        });
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientInterest")
                        .HasColumnType("int");

                    b.Property<int>("Commission")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndValidity")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallmentQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PayDays")
                        .HasColumnType("int");

                    b.Property<string>("PriceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartValidity")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PayInPerson")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PurchaseArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<float>("ArticlePriceAtTheMoment")
                        .HasColumnType("real");

                    b.Property<int>("ArticleQuantity")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "PurchaseId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchasesArticles");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PurchaseClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Answered")
                        .HasColumnType("bit");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchasesClaims");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PurchaseClaimAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseClaimId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseClaimId");

                    b.ToTable("PurchaseClaimAnswer");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Reparation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApproximateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("ClientDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Facturada")
                        .HasColumnType("bit");

                    b.Property<Guid>("NumeroTicket")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReparationStateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReparationStateId");

                    b.ToTable("Reparations");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ReparationId")
                        .HasColumnType("int");

                    b.Property<float>("ArticlePriceAtTheMoment")
                        .HasColumnType("real");

                    b.Property<int>("ArticleQuantity")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "ReparationId");

                    b.HasIndex("ReparationId");

                    b.ToTable("ReparationsArticles");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Answered")
                        .HasColumnType("bit");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReparationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ReparationId");

                    b.ToTable("ReparationsClaims");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationClaimAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReparationClaimId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReparationClaimId");

                    b.ToTable("ReparationClaimAnswer");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReparationsStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            Name = "INGRESO"
                        },
                        new
                        {
                            Id = 2,
                            Enabled = true,
                            Name = "EN REVISION"
                        },
                        new
                        {
                            Id = 3,
                            Enabled = true,
                            Name = "EN PRESUPUESTO"
                        },
                        new
                        {
                            Id = 4,
                            Enabled = true,
                            Name = "EN REPARACION"
                        },
                        new
                        {
                            Id = 5,
                            Enabled = true,
                            Name = "REPARADO"
                        },
                        new
                        {
                            Id = 6,
                            Enabled = true,
                            Name = "PAGADO"
                        },
                        new
                        {
                            Id = 7,
                            Enabled = true,
                            Name = "ENTREGADO"
                        },
                        new
                        {
                            Id = 8,
                            Enabled = true,
                            Name = "CANCELADO"
                        });
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrackingNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TransportCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PurchaseId")
                        .IsUnique();

                    b.HasIndex("TransportCompanyId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.TransportCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransportCompanies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9aae0b6d-d50c-4d0a-9b90-2a6873e3845d",
                            ConcurrencyStamp = "af57a6ea-2fee-41bf-9bbc-c86efc9c105f",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9aae0b6d-d50c-4d0a-9b90-2a6873e3845e",
                            ConcurrencyStamp = "adf26a86-80d8-4cdb-ae8d-517ac247228b",
                            Name = "EMPLEADO",
                            NormalizedName = "EMPLEADO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7c2e2a04-d48c-4dd7-a3b9-4474c400dcbe",
                            RoleId = "9aae0b6d-d50c-4d0a-9b90-2a6873e3845d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Address", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Article", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.ArticleBrand", "Brand")
                        .WithMany("Articles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.ArticleCategory", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleOffer", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Article", "Article")
                        .WithMany("Offers")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleProvider", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Article", null)
                        .WithMany("ArticlesProviders")
                        .HasForeignKey("ArticleId");

                    b.HasOne("MegaHerdt.Models.Models.Provider", "Provider")
                        .WithMany("ArticlesProviders")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleProviderItem", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.ArticleProvider", "Provision")
                        .WithMany("ArticlesItems")
                        .HasForeignKey("ProvisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Provision");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleProviderSerialNumber", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.ArticleProviderItem", null)
                        .WithMany("SerialNumbers")
                        .HasForeignKey("ArticleProviderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Bill", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Purchase", "Purchase")
                        .WithOne("Bill")
                        .HasForeignKey("MegaHerdt.Models.Models.Bill", "PurchaseId");

                    b.HasOne("MegaHerdt.Models.Models.Reparation", "Reparation")
                        .WithOne("Bill")
                        .HasForeignKey("MegaHerdt.Models.Models.Bill", "ReparationId");

                    b.Navigation("Purchase");

                    b.Navigation("Reparation");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Payment", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Phone", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", "User")
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Purchase", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PurchaseArticle", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Article", "Article")
                        .WithMany("PurchaseArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.Purchase", "Purchase")
                        .WithMany("PurchasesArticles")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PurchaseClaim", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.Purchase", "Purchase")
                        .WithMany("PurchasesClaims")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PurchaseClaimAnswer", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.PurchaseClaim", "PurchaseClaim")
                        .WithMany("Answers")
                        .HasForeignKey("PurchaseClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseClaim");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Reparation", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", "Client")
                        .WithMany("ClientReparations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.Identity.User", "Employee")
                        .WithMany("EmployeeReparations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.ReparationState", "ReparationState")
                        .WithMany("Reparations")
                        .HasForeignKey("ReparationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("ReparationState");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationArticle", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Article", "Article")
                        .WithMany("ReparationArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.Reparation", "Reparation")
                        .WithMany("ReparationsArticles")
                        .HasForeignKey("ReparationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Reparation");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationClaim", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", "Client")
                        .WithMany("ReparationsClaims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.Reparation", "Reparation")
                        .WithMany("ReparationsClaims")
                        .HasForeignKey("ReparationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Reparation");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationClaimAnswer", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.ReparationClaim", "ReparationClaim")
                        .WithMany("Answers")
                        .HasForeignKey("ReparationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReparationClaim");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Shipment", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.Purchase", "Purchase")
                        .WithOne("Shipment")
                        .HasForeignKey("MegaHerdt.Models.Models.Shipment", "PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.TransportCompany", "TransportCompany")
                        .WithMany("Shipments")
                        .HasForeignKey("TransportCompanyId");

                    b.Navigation("Address");

                    b.Navigation("Purchase");

                    b.Navigation("TransportCompany");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaHerdt.Models.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MegaHerdt.Models.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Article", b =>
                {
                    b.Navigation("ArticlesProviders");

                    b.Navigation("Offers");

                    b.Navigation("PurchaseArticles");

                    b.Navigation("ReparationArticles");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleBrand", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleCategory", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleProvider", b =>
                {
                    b.Navigation("ArticlesItems");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ArticleProviderItem", b =>
                {
                    b.Navigation("SerialNumbers");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Bill", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Identity.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ClientReparations");

                    b.Navigation("EmployeeReparations");

                    b.Navigation("Phones");

                    b.Navigation("ReparationsClaims");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Provider", b =>
                {
                    b.Navigation("ArticlesProviders");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Purchase", b =>
                {
                    b.Navigation("Bill")
                        .IsRequired();

                    b.Navigation("PurchasesArticles");

                    b.Navigation("PurchasesClaims");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.PurchaseClaim", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.Reparation", b =>
                {
                    b.Navigation("Bill")
                        .IsRequired();

                    b.Navigation("ReparationsArticles");

                    b.Navigation("ReparationsClaims");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationClaim", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.ReparationState", b =>
                {
                    b.Navigation("Reparations");
                });

            modelBuilder.Entity("MegaHerdt.Models.Models.TransportCompany", b =>
                {
                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
